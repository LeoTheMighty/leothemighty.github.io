env:
  browser: true
  es6: true
extends: airbnb-base
globals:
  PRODUCTION: true
  LEGACY_BROWSER_BUILD: true
parserOptions:
  ecmaFeatures:
    jsx: true
  sourceType: module
plugins:
  - import
  - react

# We added these rules when starting from scratch, with only a few simple
# source files. As a result, they are pretty strict. If you're developing and
# you run into an eslint violation that you disagree with, just bring it up to
# the other contributors and we'll come to an agreement about whether or not
# to disable/modify the rule!
rules:
  accessor-pairs: error
  array-bracket-spacing: error
  array-callback-return: error
  arrow-body-style: error
  arrow-parens: error
  arrow-spacing: error
  block-scoped-var: error
  block-spacing: error
  brace-style: error
  callback-return: error
  camelcase: error
  capitalized-comments: error
  class-methods-use-this:
    - error
    - exceptMethods:
        - componentDidMount
        - componentDidUpdate
        - componentWillUnmount
        - render
  comma-dangle:
    - error
    - never
  comma-spacing:
    - error
    - after: true
      before: false
  comma-style: error
  complexity: error
  computed-property-spacing: error
  consistent-return: error
  consistent-this: error
  curly: error
  default-case: error
  dot-notation: error
  eol-last: error
  eqeqeq: error
  func-call-spacing: error
  func-name-matching: error
  func-names: error
  func-style: off
  generator-star-spacing: error
  global-require: error
  guard-for-in: error
  handle-callback-err: error
  id-blacklist: error
  id-length: off
  id-match: error
  import/default: error
  import/export: error
  import/extensions:
    - error
    - never
  import/first:
    - error
    - absolute-first
  import/max-dependencies: error
  import/named: error
  import/namespace: error
  import/newline-after-import: error
  import/no-absolute-path: error
  import/no-amd: error
  import/no-commonjs: error
  import/no-deprecated: error
  import/no-dynamic-require: error
  import/no-duplicates: error
  import/no-extraneous-dependencies:
    - error
    - devDependencies:
        - gulpfile.js
  import/no-internal-modules: error
  import/no-mutable-exports: error
  # We disable import/no-named-as-default because preact-render-to-string and preact-router both
  # export a named export matching the default export, which leads to this rule (incorrectly)
  # erroring when we correctly use the default export. We could change it to a warning, but that
  # would likely still be confusing for those who see it. And since we're not actually doing
  # anything wrong, I don't want to put an explicit eslint-disable-next-line comment by the usages
  import/no-named-as-default: off
  import/no-named-as-default-member: error
  import/no-named-default: error
  import/no-namespace: error
  import/no-nodejs-modules: error
  import/no-restricted-paths: off
  import/no-unassigned-import: error
  import/no-unresolved: error
  import/no-webpack-loader-syntax: error
  import/order: off # until https://github.com/benmosher/eslint-plugin-import/pull/629 is merged
  import/prefer-default-export: error
  import/unambiguous: error
  indent: off
  init-declarations: off
  jsx-quotes: error
  key-spacing: error
  keyword-spacing: error
  line-comment-position: error
  linebreak-style:
    - error
    - unix
  lines-around-comment: error
  lines-around-directive: error
  max-depth: error
  max-len:
    - error
    - code: 100
      ignoreUrls: true
  max-lines: error
  max-nested-callbacks: error
  max-params: error
  max-statements: error
  max-statements-per-line: error
  multiline-ternary: off
  new-cap: error
  new-parens: error
  newline-after-var:
    - error
    - always
  newline-before-return: error
  newline-per-chained-call: error
  no-alert: error
  no-array-constructor: error
  no-await-in-loop: error
  no-bitwise: error
  no-caller: error
  no-catch-shadow: error
  no-confusing-arrow: error
  no-console: error
  no-continue: error
  no-div-regex: error
  no-duplicate-imports: error
  no-else-return: error
  no-empty-function: error
  no-eq-null: error
  no-eval: error
  no-extend-native: error
  no-extra-bind: error
  no-extra-label: error
  no-extra-parens:
    - error
    - all
    - enforceForArrowConditionals: false
      ignoreJSX: multi-line
      nestedBinaryExpressions: false
  no-floating-decimal: error
  no-implicit-coercion: error
  no-implicit-globals: error
  no-implied-eval: error
  no-inline-comments: error
  no-invalid-this: error
  no-iterator: error
  no-label-var: error
  no-labels: error
  no-lone-blocks: error
  no-lonely-if: error
  no-loop-func: error
  no-magic-numbers:
    - error
    - ignore:
        - 0
        - 1
        - -1
        - 1000
  no-mixed-operators: error
  no-mixed-requires: error
  no-multi-assign: error
  no-multi-spaces:
    - error
    - exceptions:
        ImportDeclaration: true
        VariableDeclarator: true
  no-multi-str: error
  no-multiple-empty-lines: error
  no-native-reassign: error
  no-negated-condition: error
  no-negated-in-lhs: error
  no-nested-ternary: error
  no-new: error
  no-new-func: error
  no-new-object: error
  no-new-require: error
  no-new-wrappers: error
  no-octal-escape: error
  no-param-reassign: error
  no-path-concat: error
  no-plusplus:
    - error
    - allowForLoopAfterthoughts: true
  no-process-env: error
  no-process-exit: error
  no-proto: error
  no-prototype-builtins: error
  no-restricted-globals: error
  no-restricted-imports: error
  no-restricted-modules: error
  no-restricted-properties: error
  no-restricted-syntax: error
  no-return-assign: error
  no-return-await: error
  no-script-url: error
  no-self-compare: error
  no-sequences: error
  no-shadow: error
  no-shadow-restricted-names: error
  no-spaced-func: error
  no-sync: error
  no-tabs: error
  no-template-curly-in-string: error
  no-throw-literal: error
  no-trailing-spaces: error
  no-undef-init: error
  no-undefined: error
  no-underscore-dangle: off
  no-unmodified-loop-condition: error
  no-unneeded-ternary: error
  no-unused-expressions:
    - error
    - allowShortCircuit: true
  no-use-before-define: error
  no-useless-call: error
  no-useless-computed-key: error
  no-useless-concat: error
  no-useless-constructor: error
  no-useless-escape: error
  no-useless-rename: error
  no-useless-return: error
  no-var: error
  no-void: error
  no-warning-comments: warn
  no-whitespace-before-property: error
  no-with: error
  object-curly-spacing:
    - error
    - always
  object-property-newline: error
  object-shorthand: error
  one-var-declaration-per-line: error
  operator-assignment: error
  padded-blocks: off
  prefer-arrow-callback:
    - error
    - allowNamedFunctions: true
  prefer-const: error
  prefer-destructuring: error
  prefer-numeric-literals: error
  prefer-promise-reject-errors: error
  prefer-reflect: off
  prefer-rest-params: error
  prefer-spread: error
  prefer-template: error
  quotes:
    - error
    - single
    - avoidEscape: true
  radix: error
  react/forbid-dom-props:
    - error
    - forbid:
        - className
        - htmlFor
        - style
  react/jsx-uses-vars: error
  react/jsx-uses-react: error
  react/prefer-stateless-function: error
  require-await: error
  require-jsdoc: off
  rest-spread-spacing: error
  semi: error
  semi-spacing: error
  sort-keys: error
  sort-vars: error
  space-before-blocks: error
  space-before-function-paren: off
  space-in-parens:
    - error
    - never
  space-infix-ops: error
  space-unary-ops: error
  spaced-comment: error
  strict: error
  symbol-description: error
  template-curly-spacing:
    - error
    - never
  template-tag-spacing: error
  unicode-bom:
    - error
    - never
  valid-jsdoc: error
  vars-on-top: error
  wrap-iife: error
  wrap-regex: error
  yield-star-spacing: error
  yoda: error
settings:
  import/ignore:
    # We have to add a fake entry to the ignore array to force it to override the airbnb-base
    # ignore array, which ignores verifying import/exports in node_modules.
    # Setting to an empty array like `import/ignore: []` will not override the airbnb-base array
    - \.NOTHING$
  react:
    pragma: h
